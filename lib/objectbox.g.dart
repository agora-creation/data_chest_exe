// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/format.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 2430184486614407464),
      name: 'FormatModel',
      lastPropertyId: const IdUid(8, 1374492759867693693),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5393349833808382043),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6830397040385746273),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2732378894466811509),
            name: 'remarks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 44629897748638670),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2551192931313022617),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1374492759867693693),
            name: 'items',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2430184486614407464),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7299008926249127716],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2487607454901214164,
        4776186862281324262,
        8172234923178114100,
        7596346141879769124,
        1660962570230627142,
        4925482750975015944,
        7444056822965127186,
        3970590514410862549,
        2802891527900800778
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FormatModel: EntityDefinition<FormatModel>(
        model: _entities[0],
        toOneRelations: (FormatModel object) => [],
        toManyRelations: (FormatModel object) => {},
        getId: (FormatModel object) => object.id,
        setId: (FormatModel object, int id) {
          object.id = id;
        },
        objectToFB: (FormatModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final itemsOffset =
              object.items == null ? null : fbb.writeString(object.items!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, remarksOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(6, object.createdAt?.millisecondsSinceEpoch);
          fbb.addOffset(7, itemsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = FormatModel(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              remarks: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              items: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FormatModel] entity fields to define ObjectBox queries.
class FormatModel_ {
  /// see [FormatModel.id]
  static final id =
      QueryIntegerProperty<FormatModel>(_entities[0].properties[0]);

  /// see [FormatModel.title]
  static final title =
      QueryStringProperty<FormatModel>(_entities[0].properties[1]);

  /// see [FormatModel.remarks]
  static final remarks =
      QueryStringProperty<FormatModel>(_entities[0].properties[2]);

  /// see [FormatModel.type]
  static final type =
      QueryStringProperty<FormatModel>(_entities[0].properties[3]);

  /// see [FormatModel.createdAt]
  static final createdAt =
      QueryIntegerProperty<FormatModel>(_entities[0].properties[4]);

  /// see [FormatModel.items]
  static final items =
      QueryStringProperty<FormatModel>(_entities[0].properties[5]);
}
